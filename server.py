import os
import cv2
import numpy as np
import pickle
import threading
import queue
import json
import time
import base64
import io
from datetime import datetime
from flask import Flask, request, jsonify, render_template, send_from_directory, Response
from flask_cors import CORS
import speech_recognition as sr
import pyaudio
import wave
import serial
import serial.tools.list_ports
from insightface.app import FaceAnalysis
from ultralytics import YOLO  # Th√™m YOLOv8

# C·∫•u h√¨nh Flask ph√π h·ª£p v·ªõi c·∫•u tr√∫c th∆∞ m·ª•c
app = Flask(__name__, 
            static_folder='static',
            template_folder='templates')
CORS(app)  # Enable CORS

# Load face database
face_db = {}
if os.path.exists("face_db.pkl"):
    with open("face_db.pkl", "rb") as f:
        face_db = pickle.load(f)

# Initialize InsightFace
face_app = FaceAnalysis(providers=['CPUExecutionProvider'])
face_app.prepare(ctx_id=0, det_size=(640, 640))

# Initialize YOLOv8 model
yolo_model = None
try:
    yolo_model = YOLO("yolov8n.pt")
    print("‚úÖ YOLO model loaded successfully")
except Exception as e:
    print(f"‚ùå Failed to load YOLO model: {e}")

# Authentication status
auth_status = {
    "authenticated": False,
    "user": None,
    "last_update": None
}

# Sensor data
sensor_data = {
    "temperature": "28",
    "soil_moisture": "60%",
    "light": "750",
    "water_level": "75%"
}

# Pump state
pump_state = {
    "state": False
}

# Camera and face recognition variables
camera = None
face_recognition_active = False
frame_queue = queue.Queue(maxsize=1)

# ESP32-CAM variables
esp32cam_ip = "192.168.164.55"  # C·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ IP m·∫∑c ƒë·ªãnh c·ªßa ESP32-CAM
esp32cam_port = "81"            # C·ªïng m·∫∑c ƒë·ªãnh
esp32cam_url = f"http://{esp32cam_ip}:{esp32cam_port}/stream"
esp32cam_active = False
esp32cam_queue = queue.Queue(maxsize=5)
esp32cam_processed_frame = None
esp32cam_lock = threading.Lock()
esp32cam_stats = {
    "detections": 0,
    "objects": {},
    "fps": 0,
    "connection_healthy": False,
    "url": esp32cam_url
}

# Voice recognition variables
recognizer = sr.Recognizer()
voice_recognition_active = False
arduino = None
arduino_port = None
arduino_connected = False

# ESP32 Static IP Configuration - ƒê√£ c·∫≠p nh·∫≠t sang m·∫°ng 192.168.162.x
esp32_ip = "192.168.162.10"  # ƒê·ªãa ch·ªâ IP tƒ©nh m·ªõi c·ªßa ESP32

# ===== Face Recognition Functions =====

def initialize_camera():
    global camera
    if camera is None:
        camera = cv2.VideoCapture(0)
        camera.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
        camera.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
    return camera

def release_camera():
    global camera
    if camera is not None:
        camera.release()
        camera = None

def camera_reader():
    global camera, face_recognition_active
    initialize_camera()
    
    while face_recognition_active:
        ret, frame = camera.read()
        if not ret:
            time.sleep(0.1)
            continue
            
        if not frame_queue.empty():
            frame_queue.get_nowait()  # Keep only the latest frame
        
        frame_queue.put(frame)
        time.sleep(0.03)  # ~30 FPS

def process_face_recognition():
    global auth_status, face_recognition_active
    
    while face_recognition_active:
        if frame_queue.empty():
            time.sleep(0.1)
            continue
            
        frame = frame_queue.get()
        rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        
        # Detect faces
        faces = face_app.get(rgb_frame)
        
        for face in faces:
            bbox = face.bbox.astype(int)
            face_embedding = face.embedding
            
            best_match = None
            best_score = -1
            
            # Compare with database
            for img_name, data in face_db.items():
                db_embedding = data["embeddings"]
                similarity = np.dot(face_embedding, db_embedding) / (np.linalg.norm(face_embedding) * np.linalg.norm(db_embedding))
                
                if similarity > best_score:
                    best_score = similarity
                    best_match = img_name
            
            # If face matched (threshold 0.5)
            if best_score > 0.5:
                auth_status["authenticated"] = True
                auth_status["user"] = best_match
                auth_status["last_update"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                print(f"‚úÖ Authentication successful: {best_match} with score {best_score:.2f}")
                face_recognition_active = False
                break
        
        time.sleep(0.1)

def start_face_recognition():
    global face_recognition_active
    if face_recognition_active:
        return {"status": "already_running"}
    
    face_recognition_active = True
    
    # Start camera reader thread
    camera_thread = threading.Thread(target=camera_reader)
    camera_thread.daemon = True
    camera_thread.start()
    
    # Start face recognition thread
    face_thread = threading.Thread(target=process_face_recognition)
    face_thread.daemon = True
    face_thread.start()
    
    return {"status": "started"}

def stop_face_recognition():
    global face_recognition_active
    face_recognition_active = False
    time.sleep(0.5)  # Allow threads to clean up
    release_camera()
    return {"status": "stopped"}

# ===== ESP32-CAM Object Detection Functions =====

def esp32cam_reader_thread():
    """Thread to continuously read frames from ESP32-CAM"""
    global esp32cam_active, esp32cam_stats, esp32cam_url
    print(f"üé• Starting ESP32-CAM reader thread with URL: {esp32cam_url}")
    retry_count = 0
    
    # Danh s√°ch c√°c ƒë∆∞·ªùng d·∫´n stream c√≥ th·ªÉ s·ª≠ d·ª•ng
    stream_paths = ["/stream", "/video", "/capture", "/mjpeg/1"]
    current_path_index = 0
    base_url = f"http://{esp32cam_ip}:{esp32cam_port}"
    
    while esp32cam_active:
        try:
            # L·∫•y ƒë∆∞·ªùng d·∫´n stream hi·ªán t·∫°i
            current_path = stream_paths[current_path_index]
            current_url = f"{base_url}{current_path}"
            
            print(f"üîç Th·ª≠ k·∫øt n·ªëi ƒë·∫øn ESP32-CAM v·ªõi URL: {current_url}")
            
            # Thi·∫øt l·∫≠p c√°c t√πy ch·ªçn cho VideoCapture
            # CAP_PROP_OPEN_TIMEOUT_MSEC: th·ªùi gian timeout khi m·ªü stream (5 gi√¢y)
            # CAP_PROP_READ_TIMEOUT_MSEC: th·ªùi gian timeout khi ƒë·ªçc frame (5 gi√¢y)
            cap = cv2.VideoCapture(current_url, cv2.CAP_FFMPEG)
            cap.set(cv2.CAP_PROP_OPEN_TIMEOUT_MSEC, 5000)  # 5 gi√¢y timeout
            cap.set(cv2.CAP_PROP_READ_TIMEOUT_MSEC, 5000)  # 5 gi√¢y timeout
            
            # Th·ª≠ ƒë·ªçc m·ªôt frame ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi
            ret, frame = cap.read()
            
            if not ret or not cap.isOpened():
                # Th·ª≠ ƒë∆∞·ªùng d·∫´n k·∫ø ti·∫øp
                current_path_index = (current_path_index + 1) % len(stream_paths)
                
                retry_count += 1
                if retry_count > len(stream_paths) * 2:  # Th·ª≠ m·ªói ƒë∆∞·ªùng d·∫´n nhi·ªÅu l·∫ßn
                    print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn ESP32-CAM sau {retry_count} l·∫ßn th·ª≠. Ch·ªù l√¢u h∆°n...")
                    time.sleep(5)  # Ch·ªù l√¢u h∆°n gi·ªØa c√°c l·∫ßn th·ª≠
                    retry_count = 0
                else:
                    print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ m·ªü stream ESP32-CAM t·∫°i {current_url}. Th·ª≠ l·∫°i {retry_count}/{len(stream_paths) * 2}...")
                    time.sleep(2)  # Ch·ªù gi·ªØa c√°c l·∫ßn th·ª≠
                
                # ƒê·∫£m b·∫£o gi·∫£i ph√≥ng t√†i nguy√™n
                cap.release()
                
                with esp32cam_lock:
                    esp32cam_stats["connection_healthy"] = False
                    esp32cam_stats["url"] = current_url
                continue
                
            # K·∫øt n·ªëi th√†nh c√¥ng, c·∫≠p nh·∫≠t URL
            esp32cam_url = current_url
            print(f"‚úÖ K·∫øt n·ªëi th√†nh c√¥ng ƒë·∫øn ESP32-CAM t·∫°i {esp32cam_url}")
            
            with esp32cam_lock:
                esp32cam_stats["connection_healthy"] = True
                esp32cam_stats["url"] = esp32cam_url
            
            retry_count = 0
            frame_count = 0
            start_time = time.time()
            
            while esp32cam_active and cap.isOpened():
                ret, frame = cap.read()
                if not ret:
                    print(f"‚ö†Ô∏è M·∫•t k·∫øt n·ªëi ƒë·∫øn ESP32-CAM t·∫°i {esp32cam_url}")
                    break
                
                # Try to add to queue, skip if full
                try:
                    if not esp32cam_queue.full():
                        esp32cam_queue.put(frame.copy(), block=False)
                        frame_count += 1
                except queue.Full:
                    pass
                
                # Calculate FPS
                elapsed = time.time() - start_time
                if elapsed >= 1.0:
                    with esp32cam_lock:
                        esp32cam_stats["fps"] = frame_count / elapsed
                    frame_count = 0
                    start_time = time.time()
            
            print(f"‚ö†Ô∏è Stream k·∫øt n·ªëi b·ªã m·∫•t t·ª´ {esp32cam_url}")
            cap.release()
            with esp32cam_lock:
                esp32cam_stats["connection_healthy"] = False
                
        except Exception as e:
            print(f"‚ùå L·ªói trong ESP32-CAM reader: {e}")
            with esp32cam_lock:
                esp32cam_stats["connection_healthy"] = False
            time.sleep(2)
            
            print("‚úÖ ESP32-CAM stream connection established")
            with esp32cam_lock:
                esp32cam_stats["connection_healthy"] = True
            
            retry_count = 0
            frame_count = 0
            start_time = time.time()
            
            while esp32cam_active and cap.isOpened():
                ret, frame = cap.read()
                if not ret:
                    print("‚ö†Ô∏è Failed to receive frame from ESP32-CAM")
                    break
                
                # Try to add to queue, skip if full
                try:
                    if not esp32cam_queue.full():
                        esp32cam_queue.put(frame.copy(), block=False)
                        frame_count += 1
                except queue.Full:
                    pass
                
                # Calculate FPS
                elapsed = time.time() - start_time
                if elapsed >= 1.0:
                    with esp32cam_lock:
                        esp32cam_stats["fps"] = frame_count / elapsed
                    frame_count = 0
                    start_time = time.time()
            
            print("‚ö†Ô∏è ESP32-CAM stream connection lost")
            cap.release()
            with esp32cam_lock:
                esp32cam_stats["connection_healthy"] = False
                
        except Exception as e:
            print(f"‚ùå Error in ESP32-CAM reader: {e}")
            with esp32cam_lock:
                esp32cam_stats["connection_healthy"] = False
            time.sleep(3)

def object_detection_thread():
    """Thread to run YOLOv8 object detection on ESP32-CAM frames"""
    global esp32cam_active, esp32cam_processed_frame, esp32cam_stats, yolo_model
    
    print("üîç Starting YOLOv8 object detection thread")
    if yolo_model is None:
        print("‚ùå YOLOv8 model not loaded, cannot start detection thread")
        return
    
    while esp32cam_active:
        try:
            if esp32cam_queue.empty():
                time.sleep(0.01)
                continue
            
            # Get a frame from the queue
            frame = esp32cam_queue.get()
            
            # Run object detection
            results = yolo_model(frame, conf=0.5, verbose=False)
            annotated_frame = results[0].plot()
            
            # Update statistics
            detections = results[0].boxes.data.cpu().numpy()
            with esp32cam_lock:
                esp32cam_processed_frame = annotated_frame
                esp32cam_stats["detections"] += len(detections)
                
                # Count object classes
                for det in detections:
                    cls_id = int(det[5])
                    cls_name = yolo_model.names[cls_id]
                    if cls_name in esp32cam_stats["objects"]:
                        esp32cam_stats["objects"][cls_name] += 1
                    else:
                        esp32cam_stats["objects"][cls_name] = 1
            
            time.sleep(0.1)  # Detection interval
            
        except Exception as e:
            print(f"‚ùå Error in YOLOv8 object detection: {e}")
            time.sleep(0.5)

def create_no_signal_image():
    """Create a 'No Signal' image"""
    img = np.zeros((480, 640, 3), dtype=np.uint8)
    img[:] = (70, 70, 70)  # Dark gray background
    
    font = cv2.FONT_HERSHEY_SIMPLEX
    cv2.putText(img, 'NO SIGNAL', (180, 240), font, 1.5, (255, 255, 255), 2)
    cv2.putText(img, 'ƒêang k·∫øt n·ªëi ƒë·∫øn ESP32-CAM...', (150, 280), font, 0.7, (200, 200, 200), 1)
    
    return img

def add_status_overlay(frame):
    """Add status overlay to the frame"""
    h, w = frame.shape[:2]
    overlay = frame.copy()
    
    # Draw semi-transparent background
    # cv2.rectangle(overlay, (10, 10), (300, 120), (0, 0, 0), -1)
    # cv2.addWeighted(overlay, 0.6, frame, 0.4, 0, frame)
    
    # # Add status text
    # font = cv2.FONT_HERSHEY_SIMPLEX
    # with esp32cam_lock:
    #     cv2.putText(frame, f"FPS: {esp32cam_stats['fps']:.1f}", (20, 40), font, 0.7, (50, 230, 50), 2)
    #     cv2.putText(frame, f"K·∫øt n·ªëi: {'GOOD' if esp32cam_stats['connection_healthy'] else 'LOST'}", 
    #                (20, 70), font, 0.7, (50, 230, 50) if esp32cam_stats['connection_healthy'] else (50, 50, 230), 2)
        
    #     # Get top 3 detected objects
    #     top_objects = ""
    #     if esp32cam_stats["objects"]:
    #         sorted_objs = sorted(esp32cam_stats["objects"].items(), key=lambda x: x[1], reverse=True)[:3]
    #         top_objects = ", ".join([f"{obj}: {count}" for obj, count in sorted_objs])
    
    # cv2.putText(frame, f"ƒê·ªëi t∆∞·ª£ng: {top_objects}", (20, 100), font, 0.6, (230, 230, 50), 2)
    
    # # Add timestamp
    # timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    # cv2.putText(frame, timestamp, (w - 220, h - 20), font, 0.6, (255, 255, 255), 1)

def generate_esp32cam_frames():
    """Generate frames for the ESP32-CAM video stream"""
    no_signal_img = create_no_signal_image()
    
    while True:
        try:
            with esp32cam_lock:
                if esp32cam_processed_frame is not None and esp32cam_stats["connection_healthy"]:
                    frame = esp32cam_processed_frame.copy()
                else:
                    frame = no_signal_img.copy()
            
            # Add status information
            add_status_overlay(frame)
            
            # Encode and stream
            _, buffer = cv2.imencode('.jpg', frame)
            frame_bytes = buffer.tobytes()
            
            yield (b'--frame\r\n'
                   b'Content-Type: image/jpeg\r\n\r\n' + frame_bytes + b'\r\n')
                
        except Exception as e:
            print(f"‚ùå Error generating ESP32-CAM frames: {e}")
            time.sleep(0.5)

def start_esp32cam_detection():
    """Start ESP32-CAM detection threads"""
    global esp32cam_active
    if esp32cam_active:
        return {"status": "already_running"}
    
    esp32cam_active = True
    
    # Start ESP32-CAM reader thread
    esp32cam_reader = threading.Thread(target=esp32cam_reader_thread)
    esp32cam_reader.daemon = True
    esp32cam_reader.start()
    
    # Start object detection thread
    detection_thread = threading.Thread(target=object_detection_thread)
    detection_thread.daemon = True
    detection_thread.start()
    
    return {"status": "started"}

def stop_esp32cam_detection():
    """Stop ESP32-CAM detection threads"""
    global esp32cam_active
    esp32cam_active = False
    time.sleep(0.5)  # Allow threads to clean up
    return {"status": "stopped"}

# ===== Voice Recognition Functions =====

def initialize_arduino():
    global arduino, arduino_port, arduino_connected
    
    if arduino_connected:
        return True
        
    # Find available ports
    ports = list(serial.tools.list_ports.comports())
    
    # Try to connect to Arduino
    if arduino_port:
        try:
            arduino = serial.Serial(arduino_port, 9600, timeout=1)
            time.sleep(2)  # Wait for Arduino to initialize
            arduino_connected = True
            print(f"‚úÖ Connected to Arduino on {arduino_port}")
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è Failed to connect to Arduino on {arduino_port}: {e}")
    
    # Try each available port
    for port in ports:
        try:
            test_port = port.device
            print(f"Trying {test_port}...")
            test_connection = serial.Serial(test_port, 9600, timeout=1)
            time.sleep(2)
            test_connection.close()
            arduino = serial.Serial(test_port, 9600, timeout=1)
            arduino_port = test_port
            arduino_connected = True
            print(f"‚úÖ Connected to Arduino on {test_port}")
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è Failed to connect to port {port.device}: {e}")
    
    print("‚ö†Ô∏è Could not connect to any Arduino")
    return False

def close_arduino():
    global arduino, arduino_connected
    if arduino and arduino.is_open:
        arduino.close()
        arduino_connected = False

def process_voice_command(command):
    global pump_state
    
    command = command.lower()
    
    if "b·∫≠t b∆°m" in command or "m·ªü b∆°m" in command:
        pump_state["state"] = True
        if arduino and arduino.is_open:
            arduino.write(b'ON\n')
        return {"action": "pump_on", "message": "ƒê√£ b·∫≠t m√°y b∆°m"}
        
    elif "t·∫Øt b∆°m" in command or "ng·ª´ng b∆°m" in command:
        pump_state["state"] = False
        if arduino and arduino.is_open:
            arduino.write(b'OFF\n')
        return {"action": "pump_off", "message": "ƒê√£ t·∫Øt m√°y b∆°m"}
        
    elif "d·ª´ng l·∫°i" in command:
        return {"action": "stop_listening", "message": "ƒê√£ d·ª´ng nghe l·ªánh"}
        
    return {"action": "unknown", "message": "Kh√¥ng hi·ªÉu l·ªánh"}

def listen_voice_command(duration=5):
    try:
        with sr.Microphone() as source:
            recognizer.adjust_for_ambient_noise(source, duration=1)
            print("üéôÔ∏è Listening...")
            audio = recognizer.listen(source, timeout=duration, phrase_time_limit=duration)
            
            try:
                text = recognizer.recognize_google(audio, language="vi-VN")
                print(f"üéôÔ∏è Heard: {text}")
                return process_voice_command(text)
            except sr.UnknownValueError:
                return {"action": "error", "message": "Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c l·ªùi n√≥i"}
            except sr.RequestError as e:
                return {"action": "error", "message": f"L·ªói Google Speech Recognition: {e}"}
                
    except Exception as e:
        return {"action": "error", "message": f"L·ªói: {str(e)}"}

def record_voice(duration=5):
    FORMAT = pyaudio.paInt16
    CHANNELS = 1
    RATE = 16000
    CHUNK = 1024
    
    try:
        audio = pyaudio.PyAudio()
        stream = audio.open(format=FORMAT, channels=CHANNELS, rate=RATE, input=True, frames_per_buffer=CHUNK)
        
        print(f"üéôÔ∏è Recording for {duration} seconds...")
        frames = []
        
        for _ in range(0, int(RATE / CHUNK * duration)):
            data = stream.read(CHUNK)
            frames.append(data)
        
        stream.stop_stream()
        stream.close()
        audio.terminate()
        
        # Create in-memory file
        audio_data = io.BytesIO()
        waveFile = wave.open(audio_data, 'wb')
        waveFile.setnchannels(CHANNELS)
        waveFile.setsampwidth(audio.get_sample_size(FORMAT))
        waveFile.setframerate(RATE)
        waveFile.writeframes(b''.join(frames))
        waveFile.close()
        
        # Process the recorded audio
        audio_data.seek(0)
        with sr.AudioFile(audio_data) as source:
            recorded_audio = recognizer.record(source)
            
            try:
                text = recognizer.recognize_google(recorded_audio, language="vi-VN")
                print(f"üéôÔ∏è Recognized: {text}")
                return process_voice_command(text)
            except sr.UnknownValueError:
                return {"action": "error", "message": "Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c l·ªùi n√≥i"}
            except sr.RequestError as e:
                return {"action": "error", "message": f"L·ªói Google Speech Recognition: {e}"}
                
    except Exception as e:
        return {"action": "error", "message": f"L·ªói: {str(e)}"}

# ===== Flask Routes =====

# Route ch√≠nh cho index.html
@app.route('/')
def index():
    # ƒê·∫ßu ti√™n, ki·ªÉm tra xem file c√≥ trong th∆∞ m·ª•c templates kh√¥ng
    try:
        return render_template('index.html')
    except:
        # N·∫øu kh√¥ng th·∫•y trong templates, th·ª≠ t√¨m ·ªü th∆∞ m·ª•c g·ªëc
        print("Kh√¥ng t√¨m th·∫•y index.html trong templates, th·ª≠ t√¨m ·ªü th∆∞ m·ª•c g·ªëc")
        return send_from_directory('.', 'index.html')

# Route cho giao di·ªán camera (h·ªó tr·ª£ c·∫£ '/camera' v√† '/camera/')
@app.route('/camera')
@app.route('/camera/')
def camera_page():
    try:
        return render_template('camera.html')
    except Exception as e:
        print(f"‚ùå L·ªói khi render camera.html: {str(e)}")
        return "Kh√¥ng t√¨m th·∫•y trang camera.html. Vui l√≤ng t·∫°o file n√†y trong th∆∞ m·ª•c templates."

# Route r√µ r√†ng cho static files
@app.route('/static/js/<path:filename>')
def serve_js(filename):
    return send_from_directory('static/js', filename)

@app.route('/data')
def get_data():
    return jsonify(sensor_data)

@app.route('/auth_status')
def get_auth_status():
    return jsonify(auth_status)

@app.route('/pump', methods=['GET', 'POST'])
def update_pump():
    if request.method == 'POST':
        data = request.json
        if 'state' in data:
            pump_state["state"] = data["state"]
            
            # Kh√¥ng c·∫ßn g·ª≠i tr·ª±c ti·∫øp l·ªánh ƒë·∫øn Arduino
            # ESP32 s·∫Ω t·ª± g·ª≠i l·ªánh qua UART
                
            return jsonify({"status": "success", "state": data["state"]})
        return jsonify({"status": "error", "message": "Invalid data"})
    else:
        # Th√™m ph∆∞∆°ng th·ª©c GET ƒë·ªÉ ESP32 c√≥ th·ªÉ l·∫•y tr·∫°ng th√°i
        return jsonify({"state": pump_state["state"]})

# Route cho ESP32-CAM video feed
@app.route('/video_feed')
def video_feed():
    """Video streaming route"""
    return Response(
        generate_esp32cam_frames(),
        mimetype='multipart/x-mixed-replace; boundary=frame'
    )

# Route ƒë·ªÉ l·∫•y th√¥ng tin th·ªëng k√™ t·ª´ ESP32-CAM
@app.route('/esp32cam/stats')
def get_esp32cam_stats():
    """API endpoint for ESP32-CAM detection statistics"""
    with esp32cam_lock:
        stats_copy = esp32cam_stats.copy()
    return jsonify(stats_copy)

# Route ƒë·ªÉ ƒëi·ªÅu khi·ªÉn ESP32-CAM
@app.route('/esp32cam/control', methods=['POST'])
def esp32cam_control():
    """Control ESP32-CAM detection"""
    global esp32cam_url, esp32cam_ip, esp32cam_port
    data = request.json
    action = data.get('action')
    
    if action == 'start':
        return jsonify(start_esp32cam_detection())
    elif action == 'stop':
        return jsonify(stop_esp32cam_detection())
    elif action == 'update_url':
        # C·∫≠p nh·∫≠t URL c·ªßa ESP32-CAM
        new_ip = data.get('ip')
        new_port = data.get('port', '81')
        
        if new_ip:
            # D·ª´ng detection hi·ªán t·∫°i
            if esp32cam_active:
                stop_esp32cam_detection()
                
            # C·∫≠p nh·∫≠t URL
            esp32cam_ip = new_ip
            esp32cam_port = new_port
            esp32cam_url = f"http://{esp32cam_ip}:{esp32cam_port}/stream"
            
            with esp32cam_lock:
                esp32cam_stats["url"] = esp32cam_url
                
            print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t URL ESP32-CAM th√†nh: {esp32cam_url}")
            
            # Kh·ªüi ƒë·ªông l·∫°i detection
            start_esp32cam_detection()
            
            return jsonify({
                "status": "success", 
                "message": f"ƒê√£ c·∫≠p nh·∫≠t URL th√†nh {esp32cam_url}",
                "url": esp32cam_url
            })
        else:
            return jsonify({"status": "error", "message": "Thi·∫øu ƒë·ªãa ch·ªâ IP"})
    else:
        return jsonify({"status": "error", "message": "Invalid action"})

@app.route('/face_auth', methods=['POST'])
def face_authentication():
    data = request.json
    action = data.get('action')
    
    if action == 'start':
        return jsonify(start_face_recognition())
    elif action == 'stop':
        return jsonify(stop_face_recognition())
    else:
        return jsonify({"status": "error", "message": "Invalid action"})

@app.route('/voice', methods=['POST'])
def voice_control():
    data = request.json
    action = data.get('action')
    
    if action == 'listen':
        # Initialize Arduino connection if needed
        if not arduino_connected:
            initialize_arduino()
            
        duration = data.get('duration', 5)
        return jsonify(listen_voice_command(duration))
    
    elif action == 'record':
        # Initialize Arduino connection if needed
        if not arduino_connected:
            initialize_arduino()
            
        duration = data.get('duration', 5)
        return jsonify(record_voice(duration))
    
    else:
        return jsonify({"status": "error", "message": "Invalid action"})

@app.route('/arduino', methods=['POST'])
def arduino_control():
    data = request.json
    action = data.get('action')
    
    if action == 'connect':
        port = data.get('port')
        global arduino_port
        arduino_port = port
        success = initialize_arduino()
        return jsonify({"status": "success" if success else "error", "connected": success})
    
    elif action == 'disconnect':
        close_arduino()
        return jsonify({"status": "success", "connected": False})
    
    elif action == 'list_ports':
        ports = [port.device for port in serial.tools.list_ports.comports()]
        return jsonify({"status": "success", "ports": ports})
    
    else:
        return jsonify({"status": "error", "message": "Invalid action"})

# ƒêi·ªÅu ch·ªânh route '/update' ƒë·ªÉ nh·∫≠n d·ªØ li·ªáu t·ª´ ESP32 m·ªõi (192.168.162.10)
@app.route('/update', methods=['POST'])
def update_sensor_data():
    global sensor_data
    try:
        data = request.json
        
        # Ki·ªÉm tra IP ngu·ªìn (t√πy ch·ªçn, n·∫øu mu·ªën x√°c th·ª±c ngu·ªìn)
        # request_ip = request.remote_addr
        # if request_ip != esp32_ip:
        #     print(f"‚ö†Ô∏è Nh·∫≠n d·ªØ li·ªáu t·ª´ IP kh√¥ng x√°c ƒë·ªãnh: {request_ip}")
        
        # C·∫≠p nh·∫≠t d·ªØ li·ªáu c·∫£m bi·∫øn
        if "temperature" in data:
            sensor_data["temperature"] = f"{data['temperature']:.1f}"
        
        if "humidity" in data and isinstance(data["humidity"], (int, float)):
            sensor_data["humidity"] = f"{data['humidity']:.1f}%"
        
        if "soil_moisture" in data:
            # Nh·∫≠n gi√° tr·ªã ƒë·ªô ·∫©m ƒë·∫•t t·ª´ ESP32 (ƒë√£ ƒë∆∞·ª£c Arduino ƒëo)
            moisture_value = data["soil_moisture"]
            if moisture_value > 0:  # ƒê·∫£m b·∫£o gi√° tr·ªã h·ª£p l·ªá
                # Gi·∫£ s·ª≠ gi√° tr·ªã ƒë·∫ßu v√†o l√† 0-1023 t·ª´ analog sensor
                moisture_percent = 100 - ((moisture_value / 1023) * 100)
                sensor_data["soil_moisture"] = f"{moisture_percent:.0f}%"
        
        if "light" in data:
            sensor_data["light"] = str(data["light"])
            
        if "water_level" in data:
            # Chuy·ªÉn ƒë·ªïi t·ª´ gi√° tr·ªã th√¥ sang ph·∫ßn trƒÉm n·∫øu c·∫ßn
            water_level = data["water_level"]
            # Gi·∫£ s·ª≠ gi√° tr·ªã ƒë·∫ßu v√†o l√† 0-1023 t·ª´ analog sensor
            water_percent = (water_level / 1023) * 100
            sensor_data["water_level"] = f"{water_percent:.0f}%"
            
        print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu c·∫£m bi·∫øn t·ª´ ESP32 ({esp32_ip}): {sensor_data}")
        return jsonify({"status": "success"})
    except Exception as e:
        print(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu c·∫£m bi·∫øn: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 400

# Start the server
if __name__ == '__main__':
    # In ra th√¥ng tin h·ªØu √≠ch v·ªÅ th∆∞ m·ª•c ƒë·ªÉ debug
    print("\n" + "="*50)
    print("üöÄ KH·ªûI ƒê·ªòNG SMART GARDEN SERVER")
    print("="*50)
    print("üîç Th∆∞ m·ª•c hi·ªán t·∫°i:", os.getcwd())
    print("üîç Th∆∞ m·ª•c templates:", os.path.join(os.getcwd(), 'templates'))
    print("üîç Th∆∞ m·ª•c static:", os.path.join(os.getcwd(), 'static'))
    print(f"üîç ESP32 Static IP: {esp32_ip}")
    print(f"üîç ESP32-CAM URL ban ƒë·∫ßu: {esp32cam_url}")
    print("="*50)
    
    # Ki·ªÉm tra xem index.html t·ªìn t·∫°i ·ªü ƒë√¢u
    if os.path.exists('templates/index.html'):
        print("‚úÖ index.html ƒë∆∞·ª£c t√¨m th·∫•y trong th∆∞ m·ª•c templates")
    elif os.path.exists('index.html'):
        print("‚ö†Ô∏è index.html ƒë∆∞·ª£c t√¨m th·∫•y trong th∆∞ m·ª•c g·ªëc, kh√¥ng trong templates")
    else:
        print("‚ùå index.html kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y!")
    
    # Ki·ªÉm tra trang camera.html
    if os.path.exists('templates/camera.html'):
        print("‚úÖ camera.html ƒë∆∞·ª£c t√¨m th·∫•y trong th∆∞ m·ª•c templates")
    else:
        print("‚ùå camera.html kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y, c·∫ßn t·∫°o file n√†y!")
    
    # Ki·ªÉm tra file JavaScript
    if os.path.exists('static/js/integration.js'):
        print("‚úÖ integration.js ƒë∆∞·ª£c t√¨m th·∫•y")
    else:
        print("‚ùå integration.js kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y trong static/js/")
    
    if os.path.exists('static/js/camera.js'):
        print("‚úÖ camera.js ƒë∆∞·ª£c t√¨m th·∫•y")
    else:
        print("‚ùå camera.js kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y trong static/js/")
    print("="*50)
    
    # T·ª± ƒë·ªông b·∫Øt ƒë·∫ßu ph√°t hi·ªán ƒë·ªëi t∆∞·ª£ng tr√™n ESP32-CAM
    if yolo_model is not None:
        print("üöÄ Kh·ªüi ƒë·ªông t·ª± ƒë·ªông ch·ª©c nƒÉng ph√°t hi·ªán ƒë·ªëi t∆∞·ª£ng tr√™n ESP32-CAM...")
        # Kh·ªüi ch·∫°y trong m·ªôt thread ri√™ng ƒë·ªÉ kh√¥ng ch·∫∑n qu√° tr√¨nh kh·ªüi ƒë·ªông server
        esp32cam_autostart = threading.Thread(target=start_esp32cam_detection)
        esp32cam_autostart.daemon = True
        esp32cam_autostart.start()
    else:
        print("‚ö†Ô∏è Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông t·ª± ƒë·ªông ch·ª©c nƒÉng ph√°t hi·ªán ƒë·ªëi t∆∞·ª£ng do kh√¥ng t√¨m th·∫•y model YOLO")
    
    # Initialize InsightFace
    print("üöÄ Kh·ªüi ƒë·ªông Smart Garden Server HTTP...")
    app.run(host='0.0.0.0', port=6005, debug=True)